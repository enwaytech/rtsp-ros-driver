#! /usr/bin/env python3

import cv2
import time
import sys
from threading import Thread

import rospy
from camera_info_manager import CameraInfoManager
from cv_bridge import CvBridge
from sensor_msgs.msg import Image, CameraInfo
from std_srvs.srv import SetBool, SetBoolRequest, SetBoolResponse


class RTSPCameraPublisher:
    def __init__(self) -> None:
        # get ROS parameters
        self._resource = rospy.get_param("~rtsp_resource")
        self._camera_name = rospy.get_param("~camera_name")
        self._camera_frame = rospy.get_param("~camera_frame")
        self._image_raw_topic = rospy.get_param("~image_raw_topic")
        self._camera_info_topic = rospy.get_param("~camera_info_topic")
        self._active = rospy.get_param("~start_activated", False)
        self._x1 = rospy.get_param("~x1", None)
        self._x2 = rospy.get_param("~x2", None)
        self._y1 = rospy.get_param("~y1", None)
        self._y2 = rospy.get_param("~y2", None)
        self._cropping = (
            False if self._x1 is None and self._x2 and None and self._y1 and None and self._y2 is None else True
        )
        self._camera_info_manager = CameraInfoManager(cname=self._camera_name, namespace=self._camera_name)
        self._camera_info_manager.loadCameraInfo()
        if not self._camera_info_manager.isCalibrated():
            rospy.logwarn("No calibration found for the current camera")

        self._ros_cv_bridge = CvBridge()
        self._image_pub = rospy.Publisher(self._image_raw_topic, Image, queue_size=1)
        self._camera_info_publisher = rospy.Publisher(self._camera_info_topic, CameraInfo, queue_size=1)

        if self._active:
            self._start()

        self._activation_service = rospy.Service("~activate", SetBool, self._activation_service_callback)

    def _activation_service_callback(self, request: SetBoolRequest) -> SetBoolResponse:
        if request.data and not self._active:
            log_msg = "Camera Activated"
            self._start()
        elif not request.data and self._active:
            log_msg = "Camera Deactivated"
            self._stop()
        else:
            if request.data == self._active:
                log_msg = "Camera is already %s" % ("activated" if self._active else "deactivated")
            else:
                log_msg = "Unknown error"
            rospy.logerr(log_msg)
            return SetBoolResponse(success=False, message=log_msg)

        rospy.loginfo(log_msg)
        return SetBoolResponse(success=True, message=log_msg)

    def _start(self) -> None:
        self._active = True
        self._pub_thread = Thread(target=self._pub_cam_image)
        self._pub_thread.start()

    def _stop(self) -> None:
        self._active = False
        self._pub_thread.join()

    def _pub_cam_image(self) -> None:
        # open RTSP stream
        cap = cv2.VideoCapture(self._resource)
        if not cap.isOpened():
            rospy.logerr("Error opening resource `%s`. Please check." % self._resource)
            sys.exit(0)

        # initialize variables
        rospy.loginfo("Correctly opened RTSP stream, starting to publish feed.")
        rval, cv_image = cap.read()
        last_t = time.time()
        last_print_t = time.time()
        t_buffer = []

        # process frames
        while rval:
            # get new frame
            rval, cv_image = cap.read()
            # handle Ctrl-C
            key = cv2.waitKey(20)
            if rospy.is_shutdown() or key == 27 or key == 1048603 or not self._active:
                break
            # convert CV image to ROS message
            if self._cropping:
                cv_image = cv_image[self._y1:self._y2, self._x1:self._x2]
            image_msg = self._ros_cv_bridge.cv2_to_imgmsg(cv_image, encoding="bgr8")
            image_msg.header.frame_id = self._camera_frame
            image_msg.header.stamp = rospy.Time.now()
            self._image_pub.publish(image_msg)

            camera_info_msg = self._camera_info_manager.getCameraInfo()
            camera_info_msg.header.frame_id = self._camera_frame
            camera_info_msg.header.stamp = image_msg.header.stamp
            self._camera_info_publisher.publish(camera_info_msg)
            # compute frequency
            cur_t = time.time()
            t_buffer.append(cur_t - last_t)
            # print frequency (if verbose)
            if cur_t - last_print_t > 1:
                wait_avg_sec = float(sum(t_buffer)) / float(len(t_buffer))
                hz = 1.0 / wait_avg_sec
                rospy.logdebug("Streaming @ %.1f Hz" % hz)
                last_print_t = cur_t
            last_t = cur_t
        self._active = False


if __name__ == "__main__":
    # initialize ROS node
    rospy.init_node("rtsp_camera_driver_node")
    rtsp_camera = RTSPCameraPublisher()
    rospy.loginfo("ROS node initialized")

    rospy.spin()
